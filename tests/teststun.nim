# Nim-WebRTC
# Copyright (c) 2024 Status Research & Development GmbH
# Licensed under either of
#  * Apache License, version 2.0, ([LICENSE-APACHE](LICENSE-APACHE))
#  * MIT license ([LICENSE-MIT](LICENSE-MIT))
# at your option.
# This file may not be copied, modified, or distributed except according to
# those terms.

{.used.}

import options, strutils
import bearssl
import ../webrtc/stun/stun_protocol
import ../webrtc/stun/stun_attributes
import ../webrtc/stun/stun_utils
import ./asyncunit

proc newRng(): ref HmacDrbgContext =
  HmacDrbgContext.new()

suite "Stun message encoding/decoding":
  test "Stun decoding":
    let msg = @[ 0x00'u8, 0x01, 0x00, 0xa4, 0x21, 0x12, 0xa4, 0x42, 0x75, 0x6a, 0x58, 0x46, 0x42, 0x58, 0x4e, 0x72, 0x6a, 0x50, 0x4d, 0x2b, 0x00, 0x06, 0x00, 0x63, 0x6c, 0x69, 0x62, 0x70, 0x32, 0x70, 0x2b, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x2b, 0x76, 0x31, 0x2f, 0x62, 0x71, 0x36, 0x67, 0x69, 0x43, 0x75, 0x4a, 0x38, 0x6e, 0x78, 0x59, 0x46, 0x4a, 0x36, 0x43, 0x63, 0x67, 0x45, 0x59, 0x58, 0x58, 0x2f, 0x78, 0x51, 0x58, 0x56, 0x4c, 0x74, 0x39, 0x71, 0x7a, 0x3a, 0x6c, 0x69, 0x62, 0x70, 0x32, 0x70, 0x2b, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x2b, 0x76, 0x31, 0x2f, 0x62, 0x71, 0x36, 0x67, 0x69, 0x43, 0x75, 0x4a, 0x38, 0x6e, 0x78, 0x59, 0x46, 0x4a, 0x36, 0x43, 0x63, 0x67, 0x45, 0x59, 0x58, 0x58, 0x2f, 0x78, 0x51, 0x58, 0x56, 0x4c, 0x74, 0x39, 0x71, 0x7a, 0x00, 0xc0, 0x57, 0x00, 0x04, 0x00, 0x00, 0x03, 0xe7, 0x80, 0x2a, 0x00, 0x08, 0x86, 0x63, 0xfd, 0x45, 0xa9, 0xe5, 0x4c, 0xdb, 0x00, 0x24, 0x00, 0x04, 0x6e, 0x00, 0x1e, 0xff, 0x00, 0x08, 0x00, 0x14, 0x16, 0xff, 0x70, 0x8d, 0x97, 0x0b, 0xd6, 0xa3, 0x5b, 0xac, 0x8f, 0x4c, 0x85, 0xe6, 0xa6, 0xac, 0xaa, 0x7a, 0x68, 0x27, 0x80, 0x28, 0x00, 0x04, 0x79, 0x5e, 0x03, 0xd8 ]
    let stunmsg = StunMessage.decode(msg)
    check:
      stunmsg.msgType == 1
      stunmsg.transactionId.len() == 12
      stunmsg.attributes.len() == 6
      stunmsg.attributes[0].attributeType == 6 # AttrUsername
      stunmsg.attributes[^1].attributeType == 0x8028 # AttrFingerprint

  test "Stun encoding":
    let transactionId: array[12, byte] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
    var msg = StunMessage(msgType: 0x0001'u16, transactionId: transactionId)
    msg.attributes.add(ErrorCode.encode(ECUnknownAttribute))
    let encoded = msg.encode()
    let decoded = StunMessage.decode(encoded)
    # cannot do `check msg == decoded` because encode add a Fingerprint
    # attribute at the end
    check:
      decoded.msgType == 1
      decoded.transactionId == transactionId
      decoded.attributes.len() == 2
      decoded.attributes[0].attributeType == 9 # AttrErrorCode
      decoded.attributes[^1].attributeType == 0x8028 # AttrFingerprint

  test "getBindingResponse":
    let msg = @[0x00'u8, 0x01, 0x00, 0xa4, 0x21, 0x12, 0xa4, 0x42, 0x55, 0x77,
                0x4b, 0x71, 0x52, 0x47, 0x31, 0x6d, 0x50, 0x77, 0x67, 0x52,
                0x00, 0x06, 0x00, 0x63, 0x6c, 0x69, 0x62, 0x70, 0x32, 0x70,
                0x2b, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x2b, 0x76, 0x31,
                0x2f, 0x71, 0x51, 0x45, 0x45, 0x71, 0x44, 0x68, 0x51, 0x47,
                0x58, 0x44, 0x7a, 0x71, 0x57, 0x53, 0x38, 0x6e, 0x66, 0x6c,
                0x46, 0x74, 0x36, 0x6b, 0x4f, 0x67, 0x4c, 0x48, 0x38, 0x32,
                0x51, 0x78, 0x35, 0x3a, 0x6c, 0x69, 0x62, 0x70, 0x32, 0x70,
                0x2b, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x2b, 0x76, 0x31,
                0x2f, 0x71, 0x51, 0x45, 0x45, 0x71, 0x44, 0x68, 0x51, 0x47,
                0x58, 0x44, 0x7a, 0x71, 0x57, 0x53, 0x38, 0x6e, 0x66, 0x6c,
                0x46, 0x74, 0x36, 0x6b, 0x4f, 0x67, 0x4c, 0x48, 0x38, 0x32,
                0x51, 0x78, 0x35, 0x00, 0xc0, 0x57, 0x00, 0x04, 0x00, 0x00,
                0x03, 0xe7, 0x80, 0x2a, 0x00, 0x08, 0xf3, 0x61, 0x52, 0xaf,
                0x6d, 0x50, 0xec, 0x63, 0x00, 0x24, 0x00, 0x04, 0x6e, 0x00,
                0x1e, 0xff, 0x00, 0x08, 0x00, 0x14, 0xd4, 0x30, 0x90, 0x22,
                0x36, 0xd8, 0x32, 0x44, 0x9b, 0x02, 0x38, 0xa7, 0x81, 0x64,
                0x4d, 0xf1, 0xa7, 0x0e, 0x7b, 0xa0, 0x80, 0x28, 0x00, 0x04,
                0x21, 0x9b, 0x7b, 0xac]
    let response = getBindingResponse(msg, TransportAddress(initTAddress("127.0.0.1:4242")))
    check:
      response.isSome()
      response.get() == @[1'u8, 1, 0, 44, 33, 18, 164, 66, 85, 119, 75, 113, 82, 71, 49, 109, 80, 119, 103, 82, 0, 32, 0, 8, 0, 1, 49, 128, 94, 18, 164, 67, 0, 8, 0, 20, 108, 97, 248, 191, 152, 3, 6, 204, 50, 118, 190, 144, 193, 207, 113, 115, 248, 252, 186, 239, 128, 40, 0, 4, 86, 114, 133, 42]

  test "Error while decoding":
    let msgLengthFailed = @[ 0x00'u8, 0x01, 0x00, 0xa4, 0x21, 0x12, 0xa4, 0x42, 0x75, 0x6a, 0x58, 0x46, 0x42, 0x58, 0x4e, 0x72, 0x6a, 0x50, 0x4d ]
    expect AssertionDefect: discard StunMessage.decode(msgLengthFailed)
    let msgAttrFailed = @[ 0x00'u8, 0x01, 0x00, 0x08, 0x21, 0x12, 0xa4, 0x42, 0x75, 0x6a, 0x58, 0x46, 0x42, 0x58, 0x4e, 0x72, 0x6a, 0x50, 0x4d, 0x2b, 0x28, 0x00, 0x05, 0x79, 0x5e, 0x03, 0xd8 ]
    expect AssertionDefect: discard StunMessage.decode(msgAttrFailed)

  test "genUfrag":
    let s = genUfrag(newRng(), 20)
    check s.len() == 20
    for c in s:
      check isAlphaNumeric(c.chr())
